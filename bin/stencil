#!/usr/bin/env node

'use strict';

process.title = 'stencil';
process.on('unhandledRejection', function(r) { console.error(r) });
process.env.IONIC_CLI_BIN = __filename;


var chalk = require('chalk');
var path = require('path');
var semver = require('semver');


if (semver.lt(process.version, 'v6.4.0')) {
  console.log('ERR' + ': Your Node.js version is ' + chalk.bold(process.version) + '. Please update to the latest Node 6 LTS version (or latest Node).');
  process.exit(1);
}

var cmdArgs = process.argv;
try {
  var npmRunArgs = process.env.npm_config_argv;
  if (npmRunArgs) {
    cmdArgs = cmdArgs.concat(JSON.parse(npmRunArgs).original);
  }
} catch (e) {}


var buildConfig = {
  numWorkers: Math.min(4, require('os').cpus().length),
  process: process
};


var configFileName = 'stencil.config.js';

var projectConfigFileNameCmdIndex = cmdArgs.indexOf('--config');
if (projectConfigFileNameCmdIndex > -1) {
  configFileName = cmdArgs[projectConfigFileNameCmdIndex + 1];

} else {
  projectConfigFileNameCmdIndex = cmdArgs.indexOf('-c');
  if (projectConfigFileNameCmdIndex > -1) {
    configFileName = cmdArgs[projectConfigFileNameCmdIndex + 1];
  }
}

var configFilePath = configFileName;
if (!path.isAbsolute(configFilePath)) {
  configFilePath = path.join(process.cwd(), configFilePath);
}

buildConfig.rootDir = path.dirname(configFilePath);


try {
  var buildConfigFile = require(configFilePath);

  if (!buildConfigFile.config) {
    console.log('Invalid Stencil "' + chalk.bold(configFilePath) + '" configuration file. Missing "config" property.');
    process.exit(1);
  }

  Object.assign(buildConfig, buildConfigFile.config);

} catch(e) {
  console.log('Error reading Stencil "' + chalk.bold(configFilePath) + '" configuration file.');
  process.exit(1);
}


if (cmdArgs.indexOf('--prod') === -1 && cmdArgs.indexOf('-p') === -1) {
  buildConfig.devMode = true;
}

if (cmdArgs.indexOf('--watch') > -1 || cmdArgs.indexOf('-w') > -1) {
  buildConfig.watch = true;
}

if (cmdArgs.indexOf('--debug') > -1) {
  buildConfig.logLevel = 'debug';

} else {
  var logLevelCmdIndex = cmdArgs.indexOf('--log-level');
  if (logLevelCmdIndex > -1) {
    buildConfig.logLevel = cmdArgs[logLevelCmdIndex + 1];
  }
}


var stencil = require(path.join(__dirname, '..', 'dist' , 'compiler'));
buildConfig.logger = new stencil.CmdLogger({
  level: buildConfig.logLevel,
  stream: process.stdout,
  columns: process.stdout.columns,
  chalk: chalk
});


buildConfig.sys = Object.defineProperties({
  // direct reference
  'path': path,

}, {
  // on-demand getters
  'fs': { get: function() { return require('fs') } },
  'module': { get: function() { return require('module') } },
  'rollup': { get: function() {
      var rollup = require('rollup');
      rollup.plugins = {
        commonjs: require('rollup-plugin-commonjs'),
        nodeResolve: require('rollup-plugin-node-resolve')
      };
      return rollup;
    }
  },
  'sass': { get: function() { return require('node-sass'); } },
  'typescript': { get: function() { return require('typescript') } },
});


buildConfig.sys.createWorker = function() {
  var cp = require('child_process');

  var args = cmdArgs.slice(2);
  args[0] = 'worker';

  var opts = {
    env: {
      FORCE_COLOR: true
    }
  };

  return cp.fork(__filename, args, opts);
};


buildConfig.sys.generateContentHash = function(content) {
  var crypto = require('crypto');
  return crypto.createHash('sha1')
               .update(content)
               .digest('base64')
               .replace(/\W/g, '')
               .substr(0, 12)
               .toLowerCase();
};


buildConfig.sys.minifyCss = function(input) {
  var CleanCSS = require('clean-css');
  var result = new CleanCSS().minify(input);
  var diagnostics = [];

  if (result.errors) {
    result.errors.forEach(function(msg) {
      diagnostics.push({
        msg: msg,
        level: 'error'
      });
    });
  }

  if (result.warnings) {
    result.warnings.forEach(function(msg) {
      diagnostics.push({
        msg: msg,
        level: 'warn'
      });
    });
  }

  return {
    output: result.styles,
    sourceMap: result.sourceMap,
    diagnostics: diagnostics
  };
};


buildConfig.sys.minifyJs = function(input) {
  var UglifyJS = require("uglify-js");
  var result = UglifyJS.minify(input);
  var diagnostics = [];

  if (result.error) {
    diagnostics.push({
      msg: result.error.message,
      level: 'error'
    });
  }

  return {
    output: result.code,
    sourceMap: result.sourceMap,
    diagnostics: diagnostics
  };
};


var coreFileCache = {};
buildConfig.sys.getClientCoreFile = function(opts) {
  var fileName = opts.staticName;

  if (opts.es5) {
    fileName += '.es5';
  }
  if (opts.devMode) {
    fileName += '.dev';
  }
  fileName += '.js';

  var filePath = path.join(__dirname, '..', 'dist', 'client', fileName);

  return new Promise(function(resolve, reject) {
    if (coreFileCache[filePath]) {
      resolve(coreFileCache[filePath]);

    } else {
      buildConfig.sys.fs.readFile(filePath, 'utf-8', function(err, data) {
        if (err) {
          reject(err);
        } else {
          coreFileCache[filePath] = data;
          resolve(data);
        }
      });
    }
  });
};


switch (cmdArgs[2]) {
  case 'build':
    stencil.build(buildConfig);
    break;

  case 'collection':
    switch (cmdArgs[3]) {
      case 'add':
        stencil.collectionAdd(buildConfig);
        break;

      default:
        console.log('Invalid stencil collection command: "' + cmdArgs[3] + '"');
        process.exit(1);
    }
    break;

  case 'init':
    stencil.init(buildConfig);
    break;

  case 'worker':
    stencil.setupWorkerProcess(buildConfig);
    break;

  default:
    console.log('Invalid stencil command: "' + cmdArgs[2] + '"');
    process.exit(1);
}
