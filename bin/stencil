#!/usr/bin/env node

'use strict';

process.title = 'stencil';
process.on('unhandledRejection', function(r) { console.error(r) });
process.env.IONIC_CLI_BIN = __filename;


var chalk = require('chalk');
var path = require('path');

var versionMatch = process.version.match(/(\d).(\d)/);
if (versionMatch && parseFloat(versionMatch[0]) < 6.4) {
  console.error(chalk.red('ERR: Your Node.js version is ' + chalk.bold(process.version) + '. Please update to the latest Node LTS version.\n'));
  process.exit(1);
}

var cmdArgs = process.argv;
try {
  var npmRunArgs = process.env.npm_config_argv;
  if (npmRunArgs) {
    cmdArgs = cmdArgs.concat(JSON.parse(npmRunArgs).original);
  }
} catch (e) {}


var sys = require('./sys');
var configPath = 'stencil.config.js';

var appConfigFileNameCmdIndex = cmdArgs.indexOf('--config');
if (appConfigFileNameCmdIndex > -1) {
  configPath = cmdArgs[appConfigFileNameCmdIndex + 1];
}

if (!path.isAbsolute(configPath)) {
  configPath = path.join(process.cwd(), configPath);
}

var config = sys.loadConfigFile(configPath);

config.process = process;
config.sys = sys;


if (cmdArgs.indexOf('--help') > -1 || cmdArgs.indexOf('-h') > -1) {
  require('./help')();
  process.exit(0);
}

if (cmdArgs.indexOf('--version') > -1 || cmdArgs.indexOf('-v') > -1) {
  var packageJson = require(path.join(__dirname, '../package.json'));
  console.log(packageJson.version);
  process.exit(0);
}

if (cmdArgs.indexOf('--dev') > -1) {
  config.devMode = true;
}

if (cmdArgs.indexOf('--watch') > -1) {
  config.watch = true;
}

if (cmdArgs.indexOf('--debug') > -1) {
  config.logLevel = 'debug';

} else {
  var logLevelCmdIndex = cmdArgs.indexOf('--log-level');
  if (logLevelCmdIndex > -1) {
    config.logLevel = cmdArgs[logLevelCmdIndex + 1];
  }
}


var stencil = require(path.join(__dirname, '../dist/compiler'));

config.sys.compiler = require(path.join(__dirname, '../package.json'));

if (!config.logger) {
  var logger = require(path.join(__dirname, 'logger'));
  config.logger = new logger.CommandLineLogger({
    level: config.logLevel,
    process: process,
    chalk: chalk
  });
}


switch (cmdArgs[2]) {
  case 'build':
    stencil.build(config);
    if (config.watch) {
      process.once('SIGINT', () => {
        process.exit(0);
      });
    }
    break;

  default:
    console.error(chalk.red.bold('\n  Invalid stencil command, please see the options below:'));
    require('./help')();
    process.exit(1);
}
